/*
  SD card read/write
 
 This example shows how to read and write data to and from an SD card file  
 The circuit:
 * SD card attached to SPI bus as follows:
 ** MOSI - pin 11
 ** MISO - pin 12
 ** CLK - pin 13
 ** CS - pin 8
 ** MotionIn - pin7
 ** RedLed - pin 3
 ** GreenLed - pin 4
 ** BlueLed  - pin5
 ** PinSpeaker- pin 6
 
 created   Dec 2014
 by Salih B. KILIÇ
 modified 26 Dec 2014
 by Salih KILIÇ
 
 This example code is in the public domain.
     
 */
 
#include <SD.h>

File logFile;
int red=3;
int green=4;
int blue=5;
int inputPin=7;
int pirState=LOW;
int val = 0;
int pinSpeaker=6;

void setup()
{
 // Open serial communications and wait for port to open:
  Serial.begin(9600);
   while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }

  
  Serial.print("Initializing SD card...");
  // On the Ethernet Shield, CS is pin 4. It's set as an output by default.
  // Note that even if it's not used as the CS pin, the hardware SS pin
  // (10 on most Arduino boards, 53 on the Mega) must be left as an output
  // or the SD library functions will not work.
   pinMode(10, OUTPUT);
   digitalWrite(10,HIGH);
   pinMode(red, OUTPUT);
   pinMode(green, OUTPUT);
   pinMode(blue, OUTPUT);
   pinMode(pinSpeaker, OUTPUT);
   pinMode(inputPin, INPUT);   
   
  if (!SD.begin(8)) {
    Serial.println("initialization failed!");
    BlinkLed(red);
    return;
  }
  Serial.println("initialization done.");
  delay(200);
   BlinkLed(green);
   delay(200);
  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
 /* digitalWrite(blue,HIGH);
  delay(200);
  digitalWrite(blue,LOW);
  delay(200);
 */
 
  logFile = SD.open("logger.txt", FILE_WRITE);
  
  BlinkLed(blue);
  
  // if the file opened okay, write to it:
  if (logFile) {
    Serial.print("Writing to logger.txt...");
    logFile.println("Log star test........ Done...");
    // close the file:
    BlinkLed(blue);
    logFile.close();
    Serial.println("done.");
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening logger.txt");
    BlinkLed(blue);
    BlinkLed(red);
  }
   /*
  // re-open the file for reading:
  logFile = SD.open("logger.txt");
  if (logFile) {
    Serial.println("logger.txt:");
   
    // read from the file until there's nothing else in it:
    while (logFile.available()) {
        Serial.write(logFile.read());
    }
    // close the file:
    logFile.close();
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening logger.txt");
  }
  */
}

void loop()
{
  
   val = digitalRead(inputPin);  // read input value
   if (val == HIGH) {            // check if the input is HIGH
    digitalWrite(red, HIGH);  // turn LED ON
    playTone(300, 160);
    delay(150);

    if (pirState == LOW) {
      // we have just turned on
      Serial.println("Motion detected!");
      // We only want to print on the output change, not state
      // if the file opened okay, write to it:
      logFile = SD.open("logger.txt", FILE_WRITE);
          //BlinkLed(blue);
          if (logFile) {
            Serial.print("Writing to logger.txt...");
            //BlinkLed(green);
            logFile.println("Motion ALERT ALERT !!");
            // close the file:
            logFile.close();
            Serial.println("Log successfull done.");
            //BlinkLed(green);
          } else {
            // if the file didn't open, print an error:
            Serial.println("error opening example.txt");
            BlinkLed(red);
          }
          
      pirState = HIGH;
      
    }
    //delay(1000); // After logging wait 1 sec. 
  } else {
      digitalWrite(red, LOW); // turn LED OFF
      playTone(0, 0);
      delay(300);    
      if (pirState == HIGH){
      // we have just turned of
      Serial.println("Motion ended!");
      // if the file opened okay, write to it:
       logFile = SD.open("logger.txt", FILE_WRITE);
       //BlinkLed(blue);
       
          if (logFile) {
            Serial.print("Writing to logger.txt...");
            //BlinkLed(green);
            logFile.println("Motion STOPPED There is no thread in room !!");
            // close the file:
            logFile.close();
            Serial.println("done.");
            //BlinkLed(green);
          } else {
            // if the file didn't open, print an error:
            Serial.println("error opening logger.txt");
            BlinkLed(red);
          }
      // We only want to print on the output change, not state
      pirState = LOW;
    }
  }
  
  
  
}

void playTone(long duration, int freq) {
    duration *= 1000;
    int period = (1.0 / freq) * 1000000;
    long elapsed_time = 0;
    while (elapsed_time < duration) {
        digitalWrite(pinSpeaker,HIGH);
        delayMicroseconds(period / 2);
        digitalWrite(pinSpeaker, LOW);
        delayMicroseconds(period / 2);
        elapsed_time += (period);
    }
}

void BlinkLed(int led){
//Blink coming 
int count=2;
while(count!=0){
digitalWrite(led, HIGH);
delay(200);
digitalWrite(led,LOW);
delay(200);
count=count-1;
}
}
